<?php

use Thelia\Core\Thelia;
use Symfony\Component\Console\Input\ArgvInput;
use Symfony\Component\Dotenv\Dotenv;
use Symfony\Component\ErrorHandler\Debug;
use Symfony\Bundle\FrameworkBundle\Kernel\MicroKernelTrait;
use Symfony\Component\Filesystem\Filesystem;
use Symfony\Component\HttpKernel\Kernel;
use Symfony\Component\Config\Loader\LoaderInterface;
use Thelia\Core\Application;

if (!in_array(PHP_SAPI, ['cli', 'phpdbg', 'embed'], true)) {
    echo 'Warning: The console should be invoked via the CLI version of PHP, not the '.PHP_SAPI.' SAPI'.PHP_EOL;
}

set_time_limit(0);

require dirname(__DIR__) . '/vendor/autoload.php';

if (!class_exists(Application::class) || !class_exists(Dotenv::class)) {
    throw new LogicException('You need to add "symfony/framework-bundle" and "symfony/dotenv" as Composer dependencies.');
}

$input = new ArgvInput();
if (null !== $env = $input->getParameterOption(['--env', '-e'], null, true)) {
    putenv('APP_ENV='.$_SERVER['APP_ENV'] = $_ENV['APP_ENV'] = $env);
}

if ($input->hasParameterOption('--no-debug', true)) {
    putenv('APP_DEBUG='.$_SERVER['APP_DEBUG'] = $_ENV['APP_DEBUG'] = '0');
}

(new Dotenv())->bootEnv(dirname(__DIR__) . '/.env');

if ($_SERVER['APP_DEBUG']) {
    umask(0000);

    if (class_exists(Debug::class)) {
        Debug::enable();
    }
}

// for Thelia not installed
function getTheliaDatabaseConfigFile(string $env)
{
    $fs = new Filesystem();

    $databaseConfigFile = THELIA_CONF_DIR . 'database_' . $env . '.yml';
    if (!$fs->exists($databaseConfigFile)) {
        $databaseConfigFile = THELIA_CONF_DIR . 'database.yml';
    }

    return $databaseConfigFile;
}

if (!file_exists(getTheliaDatabaseConfigFile($_SERVER['APP_DEBUG']))) {
    $kernel = new class($env, true) extends Kernel {
        use MicroKernelTrait;

        public function getCacheDir()
        {
            if (\defined('THELIA_ROOT')) {
                return THELIA_CACHE_DIR . $this->environment;
            }

            return parent::getCacheDir();
        }

        public function getLogDir()
        {
            if (\defined('THELIA_ROOT')) {
                return THELIA_LOG_DIR;
            } else {
                return parent::getLogDir();
            }
        }

        public function registerBundles(): array
        {
            return [
                new Symfony\Bundle\FrameworkBundle\FrameworkBundle()
            ];
        }

        public function registerContainerConfiguration(LoaderInterface $loader)
        {

        }
    };

    $application = new Application($kernel);
    $application->run($input);

    exit;
}
// end for Thelia not installed

$thelia = new Thelia($_SERVER['APP_ENV'], (bool) $_SERVER['APP_DEBUG']);
$application = new Application($thelia);
$application->run($input);
