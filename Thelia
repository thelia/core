<?php

if (php_sapi_name() != 'cli') {
    throw new \Exception('this script can only be launched with cli sapi');
}
set_time_limit(0);

// allow cache to be cleared by php client or web
umask(0002);

$bootstrapToggle = false;
$bootstraped = false;

// Autoload bootstrap

foreach ($argv as $arg) {
    if ($arg === '-b') {
        $bootstrapToggle = true;

        continue;
    }

    if ($bootstrapToggle) {
        require __DIR__ . DIRECTORY_SEPARATOR . $arg;

        $bootstraped = true;
    }
}

if (!$bootstraped) {
    if (isset($bootstrapFile)) {
        require $bootstrapFile;
    } elseif (is_file($file = __DIR__ . '/vendor/autoload.php')) {
        require $file;
    } else {
        echo "No autoload file found. Please use the -b argument to include yours";
        exit(1);
    }
}

use Thelia\Core\Thelia;
use Thelia\Core\Application;
use Thelia\Command\Output\TheliaConsoleOutput;
use Symfony\Component\Console\Input\ArgvInput;
use Symfony\Component\Dotenv\Dotenv;

if (file_exists(THELIA_ROOT.'.env')) {
    (new Dotenv())->load(THELIA_ROOT.'.env');
}

$input = new ArgvInput();
$env = $input->getParameterOption(array('--env', '-e'), getenv('THELIA_ENV') ?: 'dev');
$debug = getenv('THELIA_DEBUG') !== '0' && !$input->hasParameterOption(array('--no-debug', '')) && $env !== 'prod';

use Symfony\Bundle\FrameworkBundle\Kernel\MicroKernelTrait;
use Symfony\Component\Filesystem\Filesystem;
use Symfony\Component\HttpKernel\Kernel;
use Symfony\Component\Config\Loader\LoaderInterface;
use Thelia\Command\Install;

function getTheliaDatabaseConfigFile(string $env)
{
    $fs = new Filesystem();

    $databaseConfigFile = THELIA_CONF_DIR . 'database_' . $env . '.yml';
    if (!$fs->exists($databaseConfigFile)) {
        $databaseConfigFile = THELIA_CONF_DIR . 'database.yml';
    }

    return $databaseConfigFile;
}

if (!file_exists(getTheliaDatabaseConfigFile($env))) {
    $kernel = new class($env, true) extends Kernel {
        use MicroKernelTrait;

        public function getCacheDir()
        {
            if (\defined('THELIA_ROOT')) {
                return THELIA_CACHE_DIR . $this->environment;
            }

            return parent::getCacheDir();
        }

        public function getLogDir()
        {
            if (\defined('THELIA_ROOT')) {
                return THELIA_LOG_DIR;
            } else {
                return parent::getLogDir();
            }
        }

        public function registerBundles(): array
        {
            return [
                new Symfony\Bundle\FrameworkBundle\FrameworkBundle()
            ];
        }

        public function registerContainerConfiguration(LoaderInterface $loader)
        {

        }
    };

    $application = new Application($kernel);
    $application->run($input, new TheliaConsoleOutput());

    exit;
}

$thelia = new Thelia($env, $debug);
$application = new Application($thelia);
$application->getContainer()->get('thelia.translator');
$application->run($input, new TheliaConsoleOutput());
